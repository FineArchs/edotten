import { mkdir, readdir, readFile, writeFile } from 'node:fs/promises';
import path from 'node:path';
import yaml from 'js-yaml';

const localesDir = 'locales';
const jsonOutputDir = 'public/locales';
const typesOutputDir = 'src/types';
const typeFileName = 'translations-def.autogen.d.ts';
const typeName = 'Translations';

/**
 * Converts a JSON object into a TypeScript type string with proper indentation.
 * @param {object} obj The object to convert.
 * @param {number} indentLevel The current indentation level.
 * @returns {string} A TypeScript type string.
 */
function createType(obj, indentLevel = 1) {
  let typeString = '{\n';
  const indent = '  '.repeat(indentLevel);

  for (const key in obj) {
    if (Object.hasOwn(obj, key)) {
      const value = obj[key];
      const type = typeof value;

      if (type === 'object' && value !== null && !Array.isArray(value)) {
        typeString += `${indent}${key}: ${createType(value, indentLevel + 1)}`;
      } else if (type === 'string') {
        typeString += `${indent}${key}: string;\n`;
      }
    }
  }

  typeString += `${'  '.repeat(indentLevel - 1)}}`;
  if (indentLevel > 1) {
    typeString += '\n';
  }
  return typeString;
}

async function compileLocales() {
  try {
    // Ensure output directories exist
    await mkdir(jsonOutputDir, { recursive: true });
    await mkdir(typesOutputDir, { recursive: true });

    const files = await readdir(localesDir);

    // Process all YAML files for JSON conversion
    for (const file of files) {
      if (path.extname(file) === '.yaml' || path.extname(file) === '.yml') {
        const filePath = path.join(localesDir, file);
        const fileContents = await readFile(filePath, 'utf8');
        const data = yaml.load(fileContents);

        const outputFileName = `${path.basename(
          file,
          path.extname(file),
        )}.json`;
        const outputFilePath = path.join(jsonOutputDir, outputFileName);

        await writeFile(outputFilePath, JSON.stringify(data, null, 2));
        console.log(`Compiled ${filePath} to ${outputFilePath}`);
      }
    }

    // Generate TypeScript type from en.yaml
    const enFile = files.find((file) => file.startsWith('en.'));
    if (!enFile) {
      throw new Error(
        'Could not find en.yaml or en.yml to generate types from.',
      );
    }

    const enFilePath = path.join(localesDir, enFile);
    const enFileContents = await readFile(enFilePath, 'utf8');
    const enData = yaml.load(enFileContents);
    const newType = createType(enData);
    const typeOutputPath = path.join(typesOutputDir, typeFileName);

    const fileContent = `// This file is auto-generated by scripts/compile-locales.mjs
// Do not edit this file directly.

export interface ${typeName} ${newType}
`;

    await writeFile(typeOutputPath, fileContent);
    console.log(`Generated type definition at ${typeOutputPath}`);
  } catch (err) {
    console.error('Error compiling locales or generating types:', err);
    process.exit(1);
  }
}

compileLocales();
